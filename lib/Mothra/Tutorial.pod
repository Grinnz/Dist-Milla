=head1 NAME

Mothra::Tutorial - Mothra HOW TO

=head1 WORKFLOW

=head2 Setup

Install Mothra and setup your profile.

  > cpanm Mothra
  > moth setup

Setup command will ask you a simple question to make a basic
profile. If you already have set up C<dzil> before, this is common and
you can skip the process.

=head2 Making a new distribution

Now it's time to make a new distribution.

  > moth new Dist-Name
  > cd Dist-Name

At this point, you will have a really simple C<Dist-Name> directory
that contains your module file with as minimum boilerplate as
possible.

It is recommended to track your repository under git as soon as
possible, even before releasing to CPAN.

  # Init your git
  > git init && git add . && git commit -m "initial commit"

Now start writing your code, edit the docs, tests and manage CPAN
dependencies with L<cpanfile>.

  > $EDITOR lib/Dist/Name.pm t/dist-name.t cpanfile

You can test your code with a simple C<prove -l t>.

For the first time build only, you can make a test build to get some
boilerplate you want to keep in the git repository so that your github
repository looks great with README, as well as installable from git
using C<cpanm> or testable with C<Travis CI>.

  > moth build
  > git add Build.PL META.json README.md && git commit -m "git stuff"

=head2 Making the first release

When you get confident and it's about time to ship to CPAN, use the
test and release command. Before doing so, make sure your git
directory is not dirty i.e. all changes are committed.

  > git commit -a -m "Done initial version"

Now, ake sure you have C<Changes> file ready and have a new entry
under C<{{$NEXT}}>, which will be expanded to the next version of your
module.

  > $EDITOR Changes
  > moth test
  > moth release

And your first release is done. The release is tagged on git and all
the changes atomatically made are committed to git as well.

Wait for PAUSE processing it and your module showing up on MetaCPAN in
a few minutes. Congratulations!

=head2 Making a maintainance release

You have new features, bugs, pull requests and get ready to make a next
version of your module. Great, making a new release is equally easy.

First, upgrade your module's C<$VERSION> in your C<lib/Dist/Name.pm>.

You can do so by hand with your editor, or use the handy command
C<moth bumpversion>. This will scan VERSION in your C<.pm> files and
bump the version.

  > moth bumpversion

Then make sure to edit C<Changes> file and contain entries for the
next release. And commit the changes in the git.

  > $EDITOR Changes
  > git commit -a -m "release engineering"

Now, make a release!

  > moth test
  > moth release

Again, all the remaining changes made by Mothra will be automatically
committed, tagged and pushed to the remote.

=head1 MIGRATING

This section describes how to migrate your current authoring process
to Mothra.

=head2 C<moth migrate>

If you use a standard build tool to build a distribution, chances are
that Mothra can automatically detect and figure out what you need to
do for you. Just run the command:

  > moth migrate

and it will do the hard work of removing cruft, adding new files and
ready to git commit them.

If somehow that didn't work, or you like more manual process to know
what's going on behind the scenes, continue reading.

=head2 Manually migrating from other build tools

=head3 Module Dependencies to cpanfile

First, move the prereq declaration from C<Makefile.PL> or C<Build.PL>
to C<cpanfile>.

L<cpanfile> is mostly compatible to L<Module::Install>'s requirement
DSL, so you can just copy them over to C<cpanfile>.

  # Makefile.PL
  test_requires 'Test::More', 0.90;
  requires 'Plack', '1.000';

becomes:

  # cpanfile
  test_requires 'Test::More', 0.90;
  requires 'Plack', '1.000';

which is exactly the same. If you use L<Module::Build> or
L<ExtUtils::MakeMaker>, that will be more manual process, but
basically the same thing. See L<cpanfile> for the available syntax.

=head3 Remove boilerplate 

Next, remove unnecessary boilerplate files.

  > git rm {Makefile,Build}.PL MANIFEST MANIFEST.SKIP README .shipit

=head3 Create a new ini and edit configurations

Next, create a new C<dist.ini> with the following two lines:

  name = Dist-Name
  [@Mothra]

Next, Edit C<.gitignore> and add the following lines:

  /Dist-Name-*
  /.build
  !META.json

You're almost done, and your directory will look like:

  cpanfile
  dist.ini
  lib/Dist/Name.pm
  t/...

C<git add> the newly created files and commit it.

=head3 Make a new build

Now you're ready to make the first build.

  > moth build

and if it was successful, you get a build in a directory called
C<Dist-Name-v0.1.0> under your current directory. They can be later
removed with C<moth clean> command.

Also, new C<Build.PL>, C<META.json> and C<README.md> are added in your
working directory for git-friendliness. C<git add> them and commit it.

  > git add Build.PL META.json README.md && git commit -m "git stuff"

Now you're ready to roll a new release with Mothra. Before doing so,
convert your C<Changes> file format a little bit, and make sure you
have a following header in the top:

  {{$NEXT}}
          - Change log entry for the next version

The C<{{$NEXT}}> is a template variable that gets replaced with the
version and date string, when you make a next release. This is almost
the I<only> change you're required to make in your code base.

Now, run the release command:

  > moth release

to make a new release, in the same way described above for a new
Mothra setup. When this is not your first release, the version number
gets automatically bumped by Mothra. If you want to set a speicifc
version for the next release (e.g. you have 0.1.2 and make your next
release 0.2.0, rather than 0.1.3), use C<V> environment variable with
the release command:

  > V=0.2.0 moth release

=head1 UPGRADING

B<TBD>: upgrade to Dist::Zilla

=head1 AUTHOR

Tatsuhiko Miyagawa

=head1 SEE ALSO

L<Mothra>

=cut
